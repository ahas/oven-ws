{"version":3,"sources":["request.js"],"names":["accepts","isIP","typeis","http","fresh","parseRange","parse","proxyaddr","req","Object","create","IncomingMessage","prototype","get","header","name","TypeError","lc","toLowerCase","headers","referrer","referer","accept","types","apply","arguments","acceptsEncodings","encodings","acceptsCharsets","charsets","acceptsLanguages","languages","range","size","options","is","arr","Array","isArray","length","i","defineGetter","protocol","proto","socket","encrypted","trust","app","$","remoteAddress","index","indexOf","substring","trim","secure","ip","ips","addrs","all","reverse","pop","subdomains","hostname","offset","split","slice","path","pathname","host","trimRight","method","res","status","statusCode","etag","stale","xhr","val","obj","getter","defineProperty","configurable","enumerable"],"mappings":"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","file":"request.js","sourcesContent":["import accepts from \"accepts\";\r\nimport { isIP } from \"net\";\r\nimport typeis from \"type-is\";\r\nimport http from \"http\";\r\nimport fresh from \"fresh\";\r\nimport parseRange from \"range-parser\";\r\nimport parse from \"parseurl\";\r\nimport proxyaddr from \"proxy-addr\";\r\nvar req = Object.create(http.IncomingMessage.prototype);\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\nexport default req;\r\n/**\r\n * Return request header.\r\n *\r\n * The `Referrer` header field is special-cased,\r\n * both `Referrer` and `Referer` are interchangeable.\r\n *\r\n * Examples:\r\n *\r\n *     req.get('Content-Type');\r\n *     // => \"text/plain\"\r\n *\r\n *     req.get('content-type');\r\n *     // => \"text/plain\"\r\n *\r\n *     req.get('Something');\r\n *     // => undefined\r\n *\r\n * Aliased as `req.header()`.\r\n *\r\n * @param {String} name\r\n * @return {String}\r\n * @public\r\n */\r\nreq.get = function header(name) {\r\n    if (!name) {\r\n        throw new TypeError(\"name argument is required to req.get\");\r\n    }\r\n    if (typeof name !== \"string\") {\r\n        throw new TypeError(\"name must be a string to req.get\");\r\n    }\r\n    var lc = name.toLowerCase();\r\n    switch (lc) {\r\n        case \"referer\":\r\n        case \"referrer\": {\r\n            return this.headers.referrer || this.headers.referer;\r\n        }\r\n        default: {\r\n            return this.headers[lc];\r\n        }\r\n    }\r\n};\r\n/**\r\n * To do: update docs.\r\n *\r\n * Check if the given `type(s)` is acceptable, returning\r\n * the best match when true, otherwise `undefined`, in which\r\n * case you should respond with 406 \"Not Acceptable\".\r\n *\r\n * The `type` value may be a single MIME type string\r\n * such as \"application/json\", an extension name\r\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\r\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\r\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\r\n * or array is given, the _best_ match, if any is returned.\r\n *\r\n * Examples:\r\n *\r\n *     // Accept: text/html\r\n *     req.accepts('html');\r\n *     // => \"html\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     req.accepts('html');\r\n *     // => \"html\"\r\n *     req.accepts('text/html');\r\n *     // => \"text/html\"\r\n *     req.accepts('json, text');\r\n *     // => \"json\"\r\n *     req.accepts('application/json');\r\n *     // => \"application/json\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     req.accepts('image/png');\r\n *     req.accepts('png');\r\n *     // => undefined\r\n *\r\n *     // Accept: text/*;q=.5, application/json\r\n *     req.accepts(['html', 'json']);\r\n *     req.accepts('html', 'json');\r\n *     req.accepts('html, json');\r\n *     // => \"json\"\r\n *\r\n * @param {String|Array} type(s)\r\n * @return {String|Array|Boolean}\r\n * @public\r\n */\r\nreq.accepts = function () {\r\n    var accept = accepts(this);\r\n    return accept.types.apply(accept, arguments);\r\n};\r\n/**\r\n * Check if the given `encoding`s are accepted.\r\n *\r\n * @param {String} ...encoding\r\n * @return {String|Array}\r\n * @public\r\n */\r\nreq.acceptsEncodings = function () {\r\n    var accept = accepts(this);\r\n    return accept.encodings.apply(accept, arguments);\r\n};\r\n/**\r\n * Check if the given `charset`s are acceptable,\r\n * otherwise you should respond with 406 \"Not Acceptable\".\r\n *\r\n * @param {String} ...charset\r\n * @return {String|Array}\r\n * @public\r\n */\r\nreq.acceptsCharsets = function () {\r\n    var accept = accepts(this);\r\n    return accept.charsets.apply(accept, arguments);\r\n};\r\n/**\r\n * Check if the given `lang`s are acceptable,\r\n * otherwise you should respond with 406 \"Not Acceptable\".\r\n *\r\n * @param {String} ...lang\r\n * @return {String|Array}\r\n * @public\r\n */\r\nreq.acceptsLanguages = function () {\r\n    var accept = accepts(this);\r\n    return accept.languages.apply(accept, arguments);\r\n};\r\n/**\r\n * Parse Range header field, capping to the given `size`.\r\n *\r\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\r\n * the case of a byte range this is of course the total number of bytes. If the\r\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\r\n * and `-2` when syntactically invalid.\r\n *\r\n * When ranges are returned, the array has a \"type\" property which is the type of\r\n * range that is required (most commonly, \"bytes\"). Each array element is an object\r\n * with a \"start\" and \"end\" property for the portion of the range.\r\n *\r\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\r\n * will be combined into a single range.\r\n *\r\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\r\n * should respond with 4 users when available, not 3.\r\n *\r\n * @param {number} size\r\n * @param {object} [options]\r\n * @param {boolean} [options.combine=false]\r\n * @return {number|array}\r\n * @public\r\n */\r\nreq.range = function range(size, options) {\r\n    var range = this.get(\"Range\");\r\n    if (!range) {\r\n        return;\r\n    }\r\n    return parseRange(size, range, options);\r\n};\r\n/**\r\n * Check if the incoming request contains the \"Content-Type\"\r\n * header field, and it contains the give mime `type`.\r\n *\r\n * Examples:\r\n *\r\n *      // With Content-Type: text/html; charset=utf-8\r\n *      req.is('html');\r\n *      req.is('text/html');\r\n *      req.is('text/*');\r\n *      // => true\r\n *\r\n *      // When Content-Type is application/json\r\n *      req.is('json');\r\n *      req.is('application/json');\r\n *      req.is('application/*');\r\n *      // => true\r\n *\r\n *      req.is('html');\r\n *      // => false\r\n *\r\n * @param {String|Array} types...\r\n * @return {String|false|null}\r\n * @public\r\n */\r\nreq.is = function is(types) {\r\n    var arr = types;\r\n    // support flattened arguments\r\n    if (!Array.isArray(types)) {\r\n        arr = new Array(arguments.length);\r\n        for (var i = 0; i < arr.length; i++) {\r\n            arr[i] = arguments[i];\r\n        }\r\n    }\r\n    return typeis(this, arr);\r\n};\r\n/**\r\n * Return the protocol string \"http\" or \"https\"\r\n * when requested with TLS. When the \"trust proxy\"\r\n * setting trusts the socket address, the\r\n * \"X-Forwarded-Proto\" header field will be trusted\r\n * and used if present.\r\n *\r\n * If you're running behind a reverse proxy that\r\n * supplies https for you this may be enabled.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\ndefineGetter(req, \"protocol\", function protocol() {\r\n    var proto = this.socket.encrypted ? \"https\" : \"http\";\r\n    var trust = this.app.$(\"trust proxy fn\");\r\n    if (!trust(this.socket.remoteAddress, 0)) {\r\n        return proto;\r\n    }\r\n    // Note: X-Forwarded-Proto is normally only ever a\r\n    //       single value, but this is to be safe.\r\n    var header = this.get(\"X-Forwarded-Proto\") || proto;\r\n    var index = header.indexOf(\",\");\r\n    return index !== -1 ? header.substring(0, index).trim() : header.trim();\r\n});\r\n/**\r\n * Short-hand for:\r\n *\r\n *    req.protocol === 'https'\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\ndefineGetter(req, \"secure\", function secure() {\r\n    return this.protocol === \"https\";\r\n});\r\n/**\r\n * Return the remote address from the trusted proxy.\r\n *\r\n * The is the remote address on the socket unless\r\n * \"trust proxy\" is set.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\ndefineGetter(req, \"ip\", function ip() {\r\n    var trust = this.app.$(\"trust proxy fn\");\r\n    return proxyaddr(this, trust);\r\n});\r\n/**\r\n * When \"trust proxy\" is set, trusted proxy addresses + client.\r\n *\r\n * For example if the value were \"client, proxy1, proxy2\"\r\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\r\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\r\n * \"proxy2\" were trusted.\r\n *\r\n * @return {Array}\r\n * @public\r\n */\r\ndefineGetter(req, \"ips\", function ips() {\r\n    var trust = this.app.$(\"trust proxy fn\");\r\n    var addrs = proxyaddr.all(this, trust);\r\n    // reverse the order (to farthest -> closest)\r\n    // and remove socket address\r\n    addrs.reverse().pop();\r\n    return addrs;\r\n});\r\n/**\r\n * Return subdomains as an array.\r\n *\r\n * Subdomains are the dot-separated parts of the host before the main domain of\r\n * the app. By default, the domain of the app is assumed to be the last two\r\n * parts of the host. This can be changed by setting \"subdomain offset\".\r\n *\r\n * For example, if the domain is \"tobi.ferrets.example.com\":\r\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\r\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\r\n *\r\n * @return {Array}\r\n * @public\r\n */\r\ndefineGetter(req, \"subdomains\", function subdomains() {\r\n    var hostname = this.hostname;\r\n    if (!hostname) {\r\n        return [];\r\n    }\r\n    var offset = this.app.$(\"subdomain offset\");\r\n    var subdomains = !isIP(hostname) ? hostname.split(\".\").reverse() : [hostname];\r\n    return subdomains.slice(offset);\r\n});\r\n/**\r\n * Short-hand for `url.parse(req.url).pathname`.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\ndefineGetter(req, \"path\", function path() {\r\n    return parse(this).pathname;\r\n});\r\n/**\r\n * Parse the \"Host\" header field to a hostname.\r\n *\r\n * When the \"trust proxy\" setting trusts the socket\r\n * address, the \"X-Forwarded-Host\" header field will\r\n * be trusted.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\ndefineGetter(req, \"hostname\", function hostname() {\r\n    var trust = this.app.$(\"trust proxy fn\");\r\n    var host = this.get(\"X-Forwarded-Host\");\r\n    if (!host || !trust(this.socket.remoteAddress, 0)) {\r\n        host = this.get(\"Host\");\r\n    }\r\n    else if (host.indexOf(\",\") !== -1) {\r\n        // Note: X-Forwarded-Host is normally only ever a\r\n        //       single value, but this is to be safe.\r\n        host = host.substring(0, host.indexOf(\",\")).trimRight();\r\n    }\r\n    if (!host)\r\n        return;\r\n    // IPv6 literal support\r\n    var offset = host[0] === \"[\" ? host.indexOf(\"]\") + 1 : 0;\r\n    var index = host.indexOf(\":\", offset);\r\n    return index !== -1 ? host.substring(0, index) : host;\r\n});\r\n/**\r\n * Check if the request is fresh, aka\r\n * Last-Modified and/or the ETag\r\n * still match.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\ndefineGetter(req, \"fresh\", function () {\r\n    var method = this.method;\r\n    var res = this.res;\r\n    var status = res.statusCode;\r\n    // GET or HEAD for weak freshness validation only\r\n    if (\"GET\" !== method && \"HEAD\" !== method)\r\n        return false;\r\n    // 2xx or 304 as per rfc2616 14.26\r\n    if ((status >= 200 && status < 300) || 304 === status) {\r\n        return fresh(this.headers, {\r\n            etag: res.get(\"ETag\"),\r\n            \"last-modified\": res.get(\"Last-Modified\"),\r\n        });\r\n    }\r\n    return false;\r\n});\r\n/**\r\n * Check if the request is stale, aka\r\n * \"Last-Modified\" and / or the \"ETag\" for the\r\n * resource has changed.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\ndefineGetter(req, \"stale\", function stale() {\r\n    return !this.fresh;\r\n});\r\n/**\r\n * Check if the request was an _XMLHttpRequest_.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\ndefineGetter(req, \"xhr\", function xhr() {\r\n    var val = this.get(\"X-Requested-With\") || \"\";\r\n    return val.toLowerCase() === \"xmlhttprequest\";\r\n});\r\n/**\r\n * Helper function for creating a getter on an object.\r\n *\r\n * @param {Object} obj\r\n * @param {String} name\r\n * @param {Function} getter\r\n * @private\r\n */\r\nfunction defineGetter(obj, name, getter) {\r\n    Object.defineProperty(obj, name, {\r\n        configurable: true,\r\n        enumerable: true,\r\n        get: getter,\r\n    });\r\n}\r\n//# sourceMappingURL=request.js.map"]}