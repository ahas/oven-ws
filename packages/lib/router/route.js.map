{"version":3,"sources":["route.js"],"names":["dbg","flatten","Layer","methods","debug","toString","Object","prototype","Route","path","stack","_handles_method","method","_all","name","toLowerCase","Boolean","_options","keys","get","head","push","i","length","toUpperCase","all","handlers","_i","arguments","handle","type","call","msg","TypeError","layer","undefined","dispatch","req","res","done","idx","route","next","err","handle_error","handle_request","forEach","handles","Array","from"],"mappings":"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","file":"route.js","sourcesContent":["import dbg from \"debug\";\r\nimport { flatten } from \"array-flatten\";\r\nimport Layer from \"./layer\";\r\nimport methods from \"../methods\";\r\nvar debug = dbg(\"oven/ws:router:route\");\r\nvar toString = Object.prototype.toString;\r\nvar Route = /** @class */ (function () {\r\n    /**\r\n     * Initialize `Route` with the given `path`,\r\n     *\r\n     * @param {String} path\r\n     * @public\r\n     */\r\n    function Route(path) {\r\n        this.path = path;\r\n        this.stack = [];\r\n        debug(\"new %o\", path);\r\n        // route handlers for various http methods\r\n        this.methods = {};\r\n    }\r\n    /**\r\n     * Determine if the route handles a given method.\r\n     */\r\n    Route.prototype._handles_method = function (method) {\r\n        if (this.methods._all) {\r\n            return true;\r\n        }\r\n        var name = method.toLowerCase();\r\n        if (name === \"head\" && !this.methods[\"head\"]) {\r\n            name = \"get\";\r\n        }\r\n        return Boolean(this.methods[name]);\r\n    };\r\n    /**\r\n     * @return {Array} supported HTTP methods\r\n     */\r\n    Route.prototype._options = function () {\r\n        var methods = Object.keys(this.methods);\r\n        // append automatic head\r\n        if (this.methods.get && !this.methods.head) {\r\n            methods.push(\"head\");\r\n        }\r\n        for (var i = 0; i < methods.length; i++) {\r\n            // make upper case\r\n            methods[i] = methods[i].toUpperCase();\r\n        }\r\n        return methods;\r\n    };\r\n    Route.prototype.all = function () {\r\n        var handlers = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            handlers[_i] = arguments[_i];\r\n        }\r\n        handlers = flatten(handlers);\r\n        for (var i = 0; i < handlers.length; i++) {\r\n            var handle = handlers[i];\r\n            if (typeof handle !== \"function\") {\r\n                var type = toString.call(handle);\r\n                var msg = \"Route.all() requires a callback function but got a \" + type;\r\n                throw new TypeError(msg);\r\n            }\r\n            var layer = new Layer(\"/\", {}, handle);\r\n            layer.method = undefined;\r\n            this.methods._all = true;\r\n            this.stack.push(layer);\r\n        }\r\n        return this;\r\n    };\r\n    return Route;\r\n}());\r\nexport default Route;\r\n/**\r\n * dispatch req, res into this route\r\n */\r\nRoute.prototype.dispatch = function dispatch(req, res, done) {\r\n    var idx = 0;\r\n    var stack = this.stack;\r\n    if (stack.length === 0) {\r\n        return done();\r\n    }\r\n    var method = req.method.toLowerCase();\r\n    if (method === \"head\" && !this.methods[\"head\"]) {\r\n        method = \"get\";\r\n    }\r\n    req.route = this;\r\n    next();\r\n    function next(err) {\r\n        // signal to exit route\r\n        if (err && err === \"route\") {\r\n            return done();\r\n        }\r\n        // signal to exit router\r\n        if (err && err === \"router\") {\r\n            return done(err);\r\n        }\r\n        var layer = stack[idx++];\r\n        if (!layer) {\r\n            return done(err);\r\n        }\r\n        if (layer.method && layer.method !== method) {\r\n            return next(err);\r\n        }\r\n        if (err) {\r\n            layer.handle_error(err, req, res, next);\r\n        }\r\n        else {\r\n            layer.handle_request(req, res, next);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Add a handler for all HTTP verbs to this route.\r\n *\r\n * Behaves just like middleware and can respond or call `next`\r\n * to continue processing.\r\n *\r\n * You can use multiple `.all` call to add multiple handlers.\r\n *\r\n *   function check_something(req, res, next){\r\n *     next();\r\n *   };\r\n *\r\n *   function validate_user(req, res, next){\r\n *     next();\r\n *   };\r\n *\r\n *   route\r\n *   .all(validate_user)\r\n *   .all(check_something)\r\n *   .get(function(req, res, next){\r\n *     res.send('hello world');\r\n *   });\r\n *\r\n * @param {function} handler\r\n * @return {Route} for chaining\r\n */\r\n// Automatic generation for HTTP request methods.\r\nmethods.forEach(function (method) {\r\n    Route.prototype[method] = function () {\r\n        var handles = flatten(Array.from(arguments));\r\n        for (var i = 0; i < handles.length; i++) {\r\n            var handle = handles[i];\r\n            if (typeof handle !== \"function\") {\r\n                var type = toString.call(handle);\r\n                var msg = \"Route.\" + method + \"() requires a callback function but got a \" + type;\r\n                throw new TypeError(msg);\r\n            }\r\n            var layer = new Layer(\"/\", {}, handle);\r\n            layer.method = method;\r\n            this.methods[method] = true;\r\n            this.stack.push(layer);\r\n        }\r\n        return this;\r\n    };\r\n});\r\n//# sourceMappingURL=route.js.map"]}