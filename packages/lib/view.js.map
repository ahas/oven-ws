{"version":3,"sources":["view.js"],"names":["dbg","path","fs","debug","dirname","basename","extname","join","resolve","View","name","options","opts","fileName","defaultEngine","ext","root","Error","engines","moduleName","substr","module_1","require","fn","__express","__oven_ws","engine","lookup","prototype","roots","concat","i","length","loc","dir","file","render","callback","stat","tryStat","isFile","statSync","e","undefined"],"mappings":"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","file":"view.js","sourcesContent":["import dbg from \"debug\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nvar debug = dbg(\"oven/ws:view\");\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\nvar dirname = path.dirname;\r\nvar basename = path.basename;\r\nvar extname = path.extname;\r\nvar join = path.join;\r\nvar resolve = path.resolve;\r\n/**\r\n * Initialize a new `View` with the given `name`.\r\n *\r\n * Options:\r\n *\r\n *   - `defaultEngine` the default template engine name\r\n *   - `engines` template engine require() cache\r\n *   - `root` root path for view lookup\r\n *\r\n * @param {string} name\r\n * @param {object} options\r\n * @public\r\n */\r\nvar View = /** @class */ (function () {\r\n    function View(name, options) {\r\n        var opts = options || {};\r\n        var fileName = name;\r\n        this.defaultEngine = opts.defaultEngine;\r\n        this.ext = extname(name);\r\n        this.name = name;\r\n        this.root = opts.root;\r\n        if (!this.ext && !this.defaultEngine) {\r\n            throw new Error(\"No default engine was specified and no extension was provided.\");\r\n        }\r\n        if (!this.ext) {\r\n            // get extension from default engine name\r\n            this.ext = this.defaultEngine[0] !== \".\" ? \".\" + this.defaultEngine : this.defaultEngine;\r\n            fileName += this.ext;\r\n        }\r\n        if (!opts.engines[this.ext]) {\r\n            // load engine\r\n            var moduleName = this.ext.substr(1);\r\n            debug('require \"%s\"', moduleName);\r\n            // default engine export\r\n            var module_1 = require(moduleName);\r\n            var fn = module_1.__express || module_1.__oven_ws;\r\n            if (typeof fn !== \"function\") {\r\n                throw new Error('Module \"' + moduleName + '\" does not provide a view engine.');\r\n            }\r\n            opts.engines[this.ext] = fn;\r\n        }\r\n        // store loaded engine\r\n        this.engine = opts.engines[this.ext];\r\n        // lookup path\r\n        this.path = this.lookup(fileName);\r\n    }\r\n    /**\r\n     * Lookup view by the given `name`\r\n     *\r\n     * @param {string} name\r\n     */\r\n    View.prototype.lookup = function (name) {\r\n        var roots = [].concat(this.root);\r\n        var path;\r\n        debug('lookup \"%s\"', name);\r\n        for (var i = 0; i < roots.length && !path; i++) {\r\n            var root = roots[i];\r\n            // resolve the path\r\n            var loc = resolve(root, name);\r\n            var dir = dirname(loc);\r\n            var file = basename(loc);\r\n            // resolve the file\r\n            path = this.resolve(dir, file);\r\n        }\r\n        return path;\r\n    };\r\n    /**\r\n     * Render with the given options.\r\n     *\r\n     * @param {object} options\r\n     * @param {function} callback\r\n     */\r\n    View.prototype.render = function (options, callback) {\r\n        debug('render \"%s\"', this.path);\r\n        this.engine(this.path, options, callback);\r\n    };\r\n    /**\r\n     * Resolve the file within the given directory.\r\n     *\r\n     * @param {string} dir\r\n     * @param {string} file\r\n     */\r\n    View.prototype.resolve = function (dir, file) {\r\n        var ext = this.ext;\r\n        // <path>.<ext>\r\n        var path = join(dir, file);\r\n        var stat = this.tryStat(path);\r\n        if (stat && stat.isFile()) {\r\n            return path;\r\n        }\r\n        // <path>/index.<ext>\r\n        path = join(dir, basename(file, ext), \"index\" + ext);\r\n        stat = this.tryStat(path);\r\n        if (stat && stat.isFile()) {\r\n            return path;\r\n        }\r\n    };\r\n    /**\r\n     * Return a stat, maybe.\r\n     *\r\n     * @param {string} path\r\n     * @return {fs.Stats}\r\n     */\r\n    View.prototype.tryStat = function (path) {\r\n        debug('stat \"%s\"', path);\r\n        try {\r\n            return fs.statSync(path);\r\n        }\r\n        catch (e) {\r\n            return undefined;\r\n        }\r\n    };\r\n    return View;\r\n}());\r\nexport default View;\r\n//# sourceMappingURL=view.js.map"]}