/// <reference types="node" />
import Router from "./router";
import http from "http";
import { EventEmitter } from "stream";
import { ApplicationHandler, RouterMatcher, NextHandler, PathParams, RenderCallback, RenderOptions, Request, ParamHandler, Response, RequestHandler } from "./types";
import Route from "./router/route";
import { ListenOptions } from "net";
export default class Application extends EventEmitter {
    cache: any;
    engines: any;
    settings: any;
    locals: Record<string, any>;
    request: Request;
    response: Response;
    mountPath: string;
    parent: Application;
    router: Router;
    init(): void;
    defaultConfiguration(): void;
    protected lazyRouter(): void;
    handle(req: Request, res: Response, callback?: NextHandler): void;
    use: ApplicationHandler<this>;
    route(path: string): Route;
    engine(ext: string, fn: (path: string, options: object, callback: (e: any, rendered?: string) => void) => void): this;
    param(name: string | string[], handler: ParamHandler): this;
    param(name: string | string[], regexp: RegExp): this;
    param(handler: (name: string, matcher: RegExp) => ParamHandler): this;
    $(setting: string): any;
    $(setting: string, value: any): this;
    path(): string;
    enabled(setting: string): boolean;
    disabled(setting: string): boolean;
    enable(setting: string): this;
    disable(setting: string): this;
    all(path: PathParams, ...args: RequestHandler[]): this;
    render(name: string, options: RenderOptions | RenderCallback, callback?: RenderCallback): void;
    listen(port?: number, hostname?: string, backlog?: number, listeningListener?: () => void): http.Server;
    listen(port?: number, hostname?: string, listeningListener?: () => void): http.Server;
    listen(port?: number, backlog?: number, listeningListener?: () => void): http.Server;
    listen(port?: number, listeningListener?: () => void): http.Server;
    listen(path: string, backlog?: number, listeningListener?: () => void): http.Server;
    listen(path: string, listeningListener?: () => void): http.Server;
    listen(options: ListenOptions, listeningListener?: () => void): http.Server;
    listen(handle: any, backlog?: number, listeningListener?: () => void): http.Server;
    listen(handle: any, listeningListener?: () => void): http.Server;
    get: RouterMatcher<this>;
    head: RouterMatcher<this>;
    post: RouterMatcher<this>;
    put: RouterMatcher<this>;
    delete: RouterMatcher<this>;
    connect: RouterMatcher<this>;
    options: RouterMatcher<this>;
    trace: RouterMatcher<this>;
    patch: RouterMatcher<this>;
}
