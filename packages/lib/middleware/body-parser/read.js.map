{"version":3,"sources":["read.js"],"names":["createError","getRawBody","iconv","onFinished","zlib","read","req","res","next","parse","debug","options","opts","length","stream","bodyParsed","encoding","verify","contentStream","inflate","err","encodingExists","toUpperCase","charset","toLowerCase","type","error","body","err_1","resume","onfinished","str","decode","headers","createInflate","pipe","createGunzip"],"mappings":"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","file":"read.js","sourcesContent":["/**\r\n * Module dependencies.\r\n * @private\r\n */\r\nimport createError from \"http-errors\";\r\nimport getRawBody from \"raw-body\";\r\nimport iconv from \"iconv-lite\";\r\nimport onFinished from \"on-finished\";\r\nimport zlib from \"zlib\";\r\n/**\r\n * Read a request into a buffer and parse.\r\n *\r\n * @param {object} req\r\n * @param {object} res\r\n * @param {function} next\r\n * @param {function} parse\r\n * @param {function} debug\r\n * @param {object} options\r\n * @private\r\n */\r\nexport default function read(req, res, next, parse, debug, options) {\r\n    var opts = options;\r\n    var length;\r\n    var stream;\r\n    // flag as parsed\r\n    req.bodyParsed = true;\r\n    // read options\r\n    var encoding = (opts.encoding !== null ? opts.encoding : null);\r\n    var verify = opts.verify;\r\n    try {\r\n        // get the content stream\r\n        stream = contentStream(req, debug, opts.inflate);\r\n        length = stream.length;\r\n        delete stream.length;\r\n    }\r\n    catch (err) {\r\n        return next(err);\r\n    }\r\n    // set raw-body options\r\n    opts.length = length;\r\n    opts.encoding = verify ? null : encoding;\r\n    // assert charset is supported\r\n    if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\r\n        return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\r\n            charset: encoding.toLowerCase(),\r\n            type: \"charset.unsupported\",\r\n        }));\r\n    }\r\n    // read body\r\n    debug(\"read body\");\r\n    getRawBody(stream, opts, function (error, body) {\r\n        if (error) {\r\n            var err_1;\r\n            if (error.type === \"encoding.unsupported\") {\r\n                // echo back charset\r\n                err_1 = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\r\n                    charset: encoding.toLowerCase(),\r\n                    type: \"charset.unsupported\",\r\n                });\r\n            }\r\n            else {\r\n                // set status code on error\r\n                err_1 = createError(400, error);\r\n            }\r\n            // read off entire request\r\n            stream.resume();\r\n            onFinished(req, function onfinished() {\r\n                next(createError(400, err_1));\r\n            });\r\n            return;\r\n        }\r\n        // verify\r\n        if (verify) {\r\n            try {\r\n                debug(\"verify body\");\r\n                verify(req, res, body, encoding);\r\n            }\r\n            catch (err) {\r\n                next(createError(403, err, {\r\n                    body: body,\r\n                    type: err.type || \"entity.verify.failed\",\r\n                }));\r\n                return;\r\n            }\r\n        }\r\n        // parse\r\n        var str = body;\r\n        try {\r\n            debug(\"parse body\");\r\n            str = typeof body !== \"string\" && encoding !== null ? iconv.decode(body, encoding) : body;\r\n            req.body = parse(str);\r\n        }\r\n        catch (err) {\r\n            next(createError(400, err, {\r\n                body: str,\r\n                type: err.type || \"entity.parse.failed\",\r\n            }));\r\n            return;\r\n        }\r\n        next();\r\n    });\r\n}\r\n/**\r\n * Get the content stream of the request.\r\n * @api private\r\n */\r\nfunction contentStream(req, debug, inflate) {\r\n    if (inflate === void 0) { inflate = true; }\r\n    var encoding = (req.headers[\"content-encoding\"] || \"identity\").toLowerCase();\r\n    var length = req.headers[\"content-length\"];\r\n    var stream;\r\n    debug('content-encoding \"%s\"', encoding);\r\n    if (inflate === false && encoding !== \"identity\") {\r\n        throw createError(415, \"content encoding unsupported\", {\r\n            encoding: encoding,\r\n            type: \"encoding.unsupported\",\r\n        });\r\n    }\r\n    switch (encoding) {\r\n        case \"deflate\":\r\n            stream = zlib.createInflate();\r\n            debug(\"inflate body\");\r\n            req.pipe(stream);\r\n            break;\r\n        case \"gzip\":\r\n            stream = zlib.createGunzip();\r\n            debug(\"gunzip body\");\r\n            req.pipe(stream);\r\n            break;\r\n        case \"identity\":\r\n            stream = req;\r\n            stream.length = length;\r\n            break;\r\n        default:\r\n            throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\r\n                encoding: encoding,\r\n                type: \"encoding.unsupported\",\r\n            });\r\n    }\r\n    return stream;\r\n}\r\n//# sourceMappingURL=read.js.map"]}